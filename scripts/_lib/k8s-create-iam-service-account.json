{
   "name": "Create k8s service account and associated IAM role using AWS role binding conventions",
   "type": "container",
   "author": "Kit Huckvale",
   "version": "0.1.0",
   "expectedParameters": [
      {
         "key": "cluster.arn",
         "description": "AWS ARN of the EKS cluster in which the service account will be created.",
         "required": true
      },
      {
         "key": "serviceAccount.name",
         "description": "Name of the service account to be created.",
         "required": true
      },
      {
         "key": "serviceAccount.namespace",
         "description": "k8s namespace to create the service account within.",
         "required": true
      },
      {
         "key": "serviceAccount.iam.serviceRole.description",
         "description": "Optional parameter. Plain English description of the role. If not supplied, a standard description will be used (see k8s-create-iam-service-account.params)"
      },
      {
         "key": "serviceAccount.iam.policy.name",
         "description": "Optional parameter. The name of an IAM policy to be created and applied to the service role."
      },
      {
         "key": "serviceAccount.iam.policy.trustPolicyTemplatePath",
         "description": "Optional parameter. The fully qualified path to a policy definition template or document that will be used to create the policy named by {serviceAccount.iam.policy.name}"
      },
      {
         "key": "serviceAccount.iam.policy.arns",
         "description": "Optional parameter. The AWS ARNs of one or more existing policies that should be applied to the service role.  If {serviceAccount.iam.policy.policy.name} and {serviceAccount.iam.policy.trustPolicyTemplatePath} are also set, the set of ARNs will be combined."
      },
      {
         "key": "serviceAccount.iam.serviceRole.trustedEntitiesPolicyTemplatePath",
         "description": "Optional parameter. Fully qualified path to a template trusted entity specification to be assigned to the service role. If not supplied, a standard version will be used (see .params file)."
      },
      {
         "key": "serviceAccount.manifestTemplatePath",
         "description": "Optional parameter. Fully qualified path to a YAML template for the k8s service account to be created. If not supplied, a standard version will be used (see .params file)."
      },
      {
         "key": "serviceAccount.forceCreation",
         "description": "Optional parameter. Forces recreation of the service account if already exists. Defaults to false."
      }
   ],
   "remarks": [
      "Labels can also be supplied as parameters if service account labels are desired (e.g. {app.name}, {app.component}, {app.part-of}, {app.managed-by}, {app.created-by}.) See k8s-patch-manifest-labels.json for details.",
      "Will skip IAM role (and policy) creation if it already exists.",
      "If a service account with the same name/namespace already exists, it will be patched with the required 'eks.amazonaws.com/role-arn' annotation rather than be recreated unless {serviceAccount.forceCreation} has a value."
   ],
   "parameters": [
      {
         "key": "_localId",
         "value": "{generate.shortId:5}"
      },
      {
         "key": "correlationTag",
         "value": "tron/correlationId"
      },
      {
         "key": "correlationId",
         "value": "{generate.uuid}"
      },
      {
         "key": "aws.region",
         "value": "{cluster.arn:regex((?<=:)[^:]+-[0-9]+)}"
      },
      {
         "key": "cluster.name",
         "value": "{cluster.arn:regex((?<=\\/)[^$]+)}"
      },
      {
         "key": "serviceAccount.iam.serviceRole.trustedEntitiesPolicyPath",
         "value": "{execution.outputDirectory}\\k8sSA-{serviceAccount.iam.policy.name}-{_localId}\\iam-trust-policy.json"
      },
      {
         "key": "serviceAccount.manifestPath",
         "value": "{execution.outputDirectory}\\k8sSA-{serviceAccount.iam.policy.name}-{_localId}\\manifest.yaml"
      },
      {
         "key": "serviceAccount.iam.policy.name",
         "value": ""
      },
      {
         "key": "serviceAccount.iam.policy.trustPolicyTemplatePath",
         "value": ""
      },
      {
         "key": "serviceAccount.iam.policy.arns",
         "value": ""
      },
      {
         "key": "serviceAccount.iam.serviceRole.name",
         "value": "{cluster.name:camelCased}-{serviceAccount.iam.serviceRole.nameSuffix}"
      },
      {
         "key": "serviceAccount.skipCreation",
         "value": ""
      },
      {
         "key": "serviceAccount.forceCreation",
         "value": ""
      }
   ],
   "subtasks": [
      {
         "name": "Import configuration",
         "type": "importConfig",
         "arrayDelimiter": " ",
         "filePath": "k8s-iam-service-account.params",
         "parameterScope": "parent"
      },
      {
         "name": "Verify AWS credentials",
         "type": "command",
         "command": "aws sts get-caller-identity",
         "parameterExtractors": [
            {
               "type": "jsonPath",
               "path": "Account",
               "targetKey": "aws.accountId",
               "scope": "global"
            }
         ]
      },
      {
         "name": "Verify cluster K8s access",
         "type": "command",
         "command": "kubectl config get-clusters",
         "outputEvaluators": [
            {
               "type": "regex",
               "pattern": "{cluster.arn}"
            }
         ]
      },
      {
         "name": "Create IAM service role '{serviceAccount.iam.serviceRole.name}'",
         "type": "container",
         "subtasks": [
            {
               "name": "Verify that the IAM role does not already exist",
               "type": "command",
               "command": "aws --region {aws.region} iam get-role --role-name {serviceAccount.iam.serviceRole.name}",
               "outputEvaluators": [
                  {
                     "type": "regex",
                     "pattern": "NoSuchEntity",
                     "useErrorOutput": true,
                     "resultingStatus": "OK"
                  },
                  {
                     "type": "exitCode",
                     "exitCode": 0,
                     "resultingStatus": "Skip Out"
                  }
               ]
            },
            {
               "name": "Check whether policy must be created",
               "type": "parameterConditional",
               "expression": "{serviceAccount.iam.policy.name:hasValue} = true and {serviceAccount.iam.policy.trustPolicyTemplatePath:hasValue} = true",
               "conditionedTask": {
                  "name": "Create ALB policy",
                  "type": "importTask",
                  "remarks": [
                     "iam-create-policy.json provides rollback support. "
                  ],
                  "filePath": "iam-create-policy.json",
                  "parameters": [
                     {
                        "key": "policy.name",
                        "value": "{serviceAccount.iam.policy.name}"
                     },
                     {
                        "key": "policy.trustPolicyTemplatePath",
                        "value": "{serviceAccount.iam.policy.trustPolicyTemplatePath}"
                     }
                  ],
                  "parameterExtractors": [
                     {
                        "type": "substitution",
                        "template": "{serviceAccount.iam.policy.arns}, {policy.arn}",
                        "targetKey": "serviceAccount.iam.policy.arns",
                        "scope": "global"
                     }
                  ]
               }
            },
            {
               "name": "Retrieve OIDC provider details",
               "type": "command",
               "command": "aws --region {aws.region} eks describe-cluster --name {cluster.name}",
               "parameterExtractors": [
                  {
                     "type": "jsonPath",
                     "path": "cluster.identity.oidc.issuer",
                     "targetKey": "cluster.oidcProvider.url",
                     "scope": "global"
                  },
                  {
                     "type": "substitution",
                     "template": "{cluster.oidcProvider.url}",
                     "pattern": "(?<=id/).+",
                     "targetKey": "cluster.oidcProvider.id",
                     "scope": "global"
                  }
               ]
            },
            {
               "name": "Populate role policy template",
               "type": "template",
               "templateFilePath": "{serviceAccount.iam.serviceRole.trustedEntitiesPolicyTemplatePath}",
               "savePath": "{serviceAccount.iam.serviceRole.trustedEntitiesPolicyPath}"
            },
            {
               "name": "Create IAM role",
               "type": "importTask",
               "remarks": [
                  "iam-create-role.json provides rollback support. "
               ],
               "filePath": "iam-create-role.json",
               "parameters": [
                  {
                     "key": "role.name",
                     "value": "{serviceAccount.iam.serviceRole.name}"
                  },
                  {
                     "key": "role.description",
                     "value": "Generated role. {serviceAccount.iam.serviceRole.description}"
                  },
                  {
                     "key": "role.trustedEntitiesPolicyPath",
                     "value": "{serviceAccount.iam.serviceRole.trustedEntitiesPolicyPath}"
                  },
                  {
                     "key": "role.policyArns",
                     "value": "{serviceAccount.iam.policy.arns}"
                  }
               ]
            }
         ]
      },
      {
         "name": "Retrieve service role details",
         "type": "command",
         "command": "aws --region {aws.region} iam get-role --role-name {serviceAccount.iam.serviceRole.name}",
         "parameterExtractors": [
            {
               "type": "substitution",
               "template": "{role.name}",
               "targetKey": "serviceAccount.iam.serviceRole.name",
               "scope": "global"
            },
            {
               "type": "jsonPath",
               "path": "Role.Arn",
               "targetKey": "serviceAccount.iam.serviceRole.arn",
               "scope": "global"
            }
         ]
      },
      {
         "name": "Evaluate conditions (Skip service account creation)",
         "type": "parameterConditional",
         "expression": "{serviceAccount.skipCreation:hasValue} = false",
         "conditionedTask": {
            "name": "Create K8s service account '{serviceAccount.name}'",
            "type": "container",
            "parameters": [
               {
                  "key": "_serviceAccountName",
                  "value": ""
               }
            ],
            "subtasks": [
               {
                  "name": "Check whether service account exists",
                  "type": "command",
                  "command": "kubectl --context=\"{cluster.arn}\" get serviceaccount -n {serviceAccount.namespace} {serviceAccount.name} -o json",
                  "outputEvaluators": [
                     {
                        "type": "regex",
                        "pattern": "\\(NotFound\\)",
                        "useErrorOutput": true,
                        "resultingStatus": "Skipped"
                     },
                     {
                        "type": "exitCode",
                        "exitCode": 0,
                        "resultingStatus": "OK"
                     }
                  ],
                  "parameterExtractors": [
                     {
                        "type": "jsonPath",
                        "path": "metadata.name",
                        "targetKey": "_serviceAccountName",
                        "scope": "parent"
                     }
                  ]
               },
               {
                  "name": "Evaluate conditions (Create new service account)",
                  "remarks": [
                     "Create a new service account if one doesn't already exist OR serviceAccount.forceCreation has a value."
                  ],
                  "type": "parameterConditional",
                  "expression": "{_serviceAccountName:hasValue} = false or {serviceAccount.forceCreation:hasValue} = true",
                  "conditionedTask": {
                     "name": "Create account",
                     "type": "container",
                     "subtasks": [
                        {
                           "name": "Populate service account template",
                           "type": "template",
                           "templateFilePath": "{serviceAccount.manifestTemplatePath}",
                           "savePath": "{serviceAccount.manifestPath}"
                        },
                        {
                           "name": "Decorate standard labels",
                           "type": "importTask",
                           "filePath": "k8s-patch-manifest-labels.json",
                           "parameters": [
                              {
                                 "key": "manifestPath",
                                 "value": "{serviceAccount.manifestPath}"
                              }
                           ]
                        },
                        {
                           "name": "Deploy into cluster",
                           "type": "command",
                           "command": "kubectl --context=\"{cluster.arn}\" apply -f \"{serviceAccount.manifestPath}\""
                        }
                     ],
                     "rollbackTask": {
                        "name": "Delete service account",
                        "type": "command",
                        "command": "kubectl --context=\"{cluster.arn}\" --namespace {serviceAccount.namespace} delete serviceAccount {serviceAccount.name}"
                     }
                  }
               },
               {
                  "name": "Evaluate conditions (Patch existing K8s service account)",
                  "remarks": [
                     "Patch an exiting service account unlessserviceAccount.forceCreation is set"
                  ],
                  "type": "parameterConditional",
                  "expression": "{_serviceAccountName:hasValue} = true and {serviceAccount.forceCreation:hasValue} = false",
                  "conditionedTask": {
                     "name": "Patch role-arn annotation into existing service account '{_serviceAccountName}'",
                     "type": "command",
                     "command": "kubectl --context=\"{cluster.arn}\" annotate --namespace {serviceAccount.namespace} serviceAccount {serviceAccount.name} \"eks.amazonaws.com/role-arn={serviceAccount.iam.serviceRole.arn}\" ",
                     "rollbackTask": {
                        "name": "Strip role-arn annotation from existing service account '{_serviceAccountName}'",
                        "type": "command",
                        "comamnd": "kubectl --context=\"{cluster.arn}\" patch --namespace {serviceAccount.namespace} serviceAccount {serviceAccount.name} -p='[{\"op\":\"remove\",\"path\":\"/metdata/annotations/eks.amazonaws.com/role-arn\"'"
                     }
                  }
               }
            ]
         }
      }
   ]
}